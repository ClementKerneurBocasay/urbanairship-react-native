{"version":3,"sources":["UrbanAirship.ts"],"names":["UrbanAirshipModule","NativeModules","UrbanAirshipReactModule","EventEmitter","UAEventEmitter","InternalEventType","EventType","NotificationOptionsIOS","AuthorizedNotificationSettingsIOS","convertEventEnum","type","NotificationResponse","PushReceived","Register","Registration","DeepLink","NotificationOptInStatus","InboxUpdated","ShowInbox","Error","UrbanAirship","setAndroidNotificationConfig","config","setUserNotificationsEnabled","enabled","isUserNotificationsEnabled","setDataCollectionEnabled","isDataCollectionEnabled","setPushTokenRegistrationEnabled","isPushTokenRegistrationEnabled","enableUserPushNotifications","enableChannelCreation","isUserNotificationsOptedIn","setNamedUser","namedUser","getNamedUser","addTag","tag","removeTag","getTags","editNamedUserTagGroups","TagGroupEditor","operations","editChannelTagGroups","editChannelAttributes","AttributeEditor","editNamedUserAttributes","setAnalyticsEnabled","isAnalyticsEnabled","trackScreen","screen","getChannelId","getRegistrationToken","associateIdentifier","key","id","addCustomEvent","event","actionArg","event_name","_name","event_value","_value","transaction_id","_transactionId","properties","_properties","Promise","resolve","reject","runAction","then","error","name","value","setForegroundPresentationOptions","options","Platform","OS","addListener","eventType","listener","removeListener","removeAllListeners","setAutobadgeEnabled","console","log","isAutobadgeEnabled","setBadgeNumber","badgeNumber","getBadgeNumber","displayMessageCenter","dismissMessageCenter","displayMessage","messageId","dismissMessage","getInboxMessages","deleteInboxMessage","markInboxMessageRead","refreshInbox","setAutoLaunchDefaultMessageCenter","getActiveNotifications","clearNotifications","clearNotification","identifier"],"mappings":"AAAA;AAEA;;;;;;;AAEA;;AAGA;;AACA;;AACA;;AAGA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAGC,2BAAcC,uBAAzC;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,IAAIC,8BAAJ,EAArB;AAEA;AACA;AACA;AACA;;IACKC,iB;AAUL;AACA;AACA;;WAZKA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,KAAAA,iB;;IAaOC,S;AAmCZ;AACA;AACA;;;;WArCYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,yBAAAA,S;;AA+GZ;AACA;AACA;IACYC,sB;AAeZ;AACA;AACA;;;;WAjBYA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;GAAAA,sB,sCAAAA,sB;;AAyBZ;AACA;AACA;IACYC,iC;AA2BZ;AACA;AACA;;;;WA7BYA,iC;AAAAA,EAAAA,iC;AAAAA,EAAAA,iC;AAAAA,EAAAA,iC;AAAAA,EAAAA,iC;AAAAA,EAAAA,iC;AAAAA,EAAAA,iC;GAAAA,iC,iDAAAA,iC;;AAkGZ;AACA;AACA;AACA;AACA,SAASC,gBAAT,CAA0BC,IAA1B,EAAmD;AACjD,MAAIA,IAAI,KAAKJ,SAAS,CAACK,oBAAvB,EAA6C;AAC3C,WAAON,iBAAiB,CAACM,oBAAzB;AACD,GAFD,MAEO,IAAID,IAAI,KAAKJ,SAAS,CAACM,YAAvB,EAAqC;AAC1C,WAAOP,iBAAiB,CAACO,YAAzB;AACD,GAFM,MAEA,IAAIF,IAAI,KAAKJ,SAAS,CAACO,QAAnB,IAA+BH,IAAI,KAAKJ,SAAS,CAACQ,YAAtD,EAAoE;AACzE,WAAOT,iBAAiB,CAACS,YAAzB;AACD,GAFM,MAEA,IAAIJ,IAAI,IAAIJ,SAAS,CAACS,QAAtB,EAAgC;AACrC,WAAOV,iBAAiB,CAACU,QAAzB;AACD,GAFM,MAEA,IAAIL,IAAI,IAAIJ,SAAS,CAACU,uBAAtB,EAA+C;AACpD,WAAOX,iBAAiB,CAACW,uBAAzB;AACD,GAFM,MAEA,IAAIN,IAAI,IAAIJ,SAAS,CAACW,YAAtB,EAAoC;AACzC,WAAOZ,iBAAiB,CAACY,YAAzB;AACD,GAFM,MAEA,IAAIP,IAAI,IAAIJ,SAAS,CAACY,SAAtB,EAAiC;AACtC,WAAOb,iBAAiB,CAACa,SAAzB;AACD;;AAED,QAAM,IAAIC,KAAJ,CAAU,yBAAyBT,IAAnC,CAAN;AACD;AAED;AACA;AACA;;;AAgBA;AACA;AACA;AACO,MAAMU,YAAN,CAAmB;AACxB;AACF;AACA;AACA;AACA;AACE,SAAOC,4BAAP,CAAoCC,MAApC,EAAuE;AACrEtB,IAAAA,kBAAkB,CAACqB,4BAAnB,CAAgDC,MAAhD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,2BAAP,CAAmCC,OAAnC,EAAqD;AACnDxB,IAAAA,kBAAkB,CAACuB,2BAAnB,CAA+CC,OAA/C;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,0BAAP,GAAsD;AACpD,WAAOzB,kBAAkB,CAACyB,0BAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,wBAAP,CAAgCF,OAAhC,EAAkD;AAChDxB,IAAAA,kBAAkB,CAAC0B,wBAAnB,CAA4CF,OAA5C;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOG,uBAAP,GAAmD;AACjD,WAAO3B,kBAAkB,CAAC2B,uBAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,+BAAP,CAAuCJ,OAAvC,EAAyD;AACvDxB,IAAAA,kBAAkB,CAAC4B,+BAAnB,CAAmDJ,OAAnD;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOK,8BAAP,GAA0D;AACxD,WAAO7B,kBAAkB,CAAC6B,8BAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,2BAAP,GAAuD;AACrD,WAAO9B,kBAAkB,CAAC8B,2BAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,SAAOC,qBAAP,GAA+B;AAC7B/B,IAAAA,kBAAkB,CAAC+B,qBAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,0BAAP,GAAsD;AACpD,WAAOhC,kBAAkB,CAACgC,0BAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,YAAP,CAAoBC,SAApB,EAA0D;AACxDlC,IAAAA,kBAAkB,CAACiC,YAAnB,CAAgCC,SAAhC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,YAAP,GAA0D;AACxD,WAAOnC,kBAAkB,CAACmC,YAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,MAAP,CAAcC,GAAd,EAA2B;AACzBrC,IAAAA,kBAAkB,CAACoC,MAAnB,CAA0BC,GAA1B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,SAAP,CAAiBD,GAAjB,EAA8B;AAC5BrC,IAAAA,kBAAkB,CAACsC,SAAnB,CAA6BD,GAA7B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOE,OAAP,GAAoC;AAClC,WAAOvC,kBAAkB,CAACuC,OAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,sBAAP,GAAgD;AAC9C,WAAO,IAAIC,8BAAJ,CAAoBC,UAAD,IAAqC;AAC7D1C,MAAAA,kBAAkB,CAACwC,sBAAnB,CAA0CE,UAA1C;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,oBAAP,GAA8C;AAC5C,WAAO,IAAIF,8BAAJ,CAAoBC,UAAD,IAAqC;AAC7D1C,MAAAA,kBAAkB,CAAC2C,oBAAnB,CAAwCD,UAAxC;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOE,qBAAP,GAAgD;AAC9C,WAAO,IAAIC,gCAAJ,CAAqBH,UAAD,IAAsC;AAC/D1C,MAAAA,kBAAkB,CAAC4C,qBAAnB,CAAyCF,UAAzC;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOI,uBAAP,GAAkD;AAChD,WAAO,IAAID,gCAAJ,CAAqBH,UAAD,IAAsC;AAC/D1C,MAAAA,kBAAkB,CAAC8C,uBAAnB,CAA2CJ,UAA3C;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOK,mBAAP,CAA2BvB,OAA3B,EAA6C;AAC3CxB,IAAAA,kBAAkB,CAAC+C,mBAAnB,CAAuCvB,OAAvC;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOwB,kBAAP,GAA8C;AAC5C,WAAOhD,kBAAkB,CAACgD,kBAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,WAAP,CAAmBC,MAAnB,EAAmC;AACjClD,IAAAA,kBAAkB,CAACiD,WAAnB,CAA+BC,MAA/B;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,YAAP,GAA0D;AACxD,WAAOnD,kBAAkB,CAACmD,YAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,oBAAP,GAAkE;AAChE,WAAOpD,kBAAkB,CAACoD,oBAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,mBAAP,CAA2BC,GAA3B,EAAwCC,EAAxC,EAAqD;AACnDvD,IAAAA,kBAAkB,CAACqD,mBAAnB,CAAuCC,GAAvC,EAA4CC,EAA5C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,cAAP,CAAsBC,KAAtB,EAAiE;AAC/D,UAAMC,SAAS,GAAG;AAChBC,MAAAA,UAAU,EAAEF,KAAK,CAACG,KADF;AAEhBC,MAAAA,WAAW,EAAEJ,KAAK,CAACK,MAFH;AAGhBC,MAAAA,cAAc,EAAEN,KAAK,CAACO,cAHN;AAIhBC,MAAAA,UAAU,EAAER,KAAK,CAACS;AAJF,KAAlB;AAOA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCrE,MAAAA,kBAAkB,CAACsE,SAAnB,CAA6B,yBAA7B,EAAwDZ,SAAxD,EAAmEa,IAAnE,CAAwE,MAAM;AAC5EH,QAAAA,OAAO;AACR,OAFD,EAEII,KAAD,IAAkB;AACnBH,QAAAA,MAAM,CAACG,KAAD,CAAN;AACD,OAJD;AAKD,KANM,CAAP;AAOD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOF,SAAP,CAAiBG,IAAjB,EAA+BC,KAA/B,EAA8E;AAC5E,WAAO1E,kBAAkB,CAACsE,SAAnB,CAA6BG,IAA7B,EAAmCC,KAAnC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,gCAAP,CAAwCC,OAAxC,EAAmF;AACjF,QAAIC,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACxB,aAAO9E,kBAAkB,CAAC2E,gCAAnB,CAAoDC,OAApD,CAAP;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOG,WAAP,CAAmBC,SAAnB,EAAyCC,QAAzC,EAAiG;AAC/F,WAAO9E,YAAY,CAAC4E,WAAb,CAAyBtE,gBAAgB,CAACuE,SAAD,CAAzC,EAAsDC,QAAtD,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,cAAP,CAAsBF,SAAtB,EAA4CC,QAA5C,EAA+E;AAC7E9E,IAAAA,YAAY,CAAC+E,cAAb,CAA4BzE,gBAAgB,CAACuE,SAAD,CAA5C,EAAyDC,QAAzD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOE,kBAAP,CAA0BH,SAA1B,EAAgD;AAC9C7E,IAAAA,YAAY,CAACgF,kBAAb,CAAgC1E,gBAAgB,CAACuE,SAAD,CAAhD;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOI,mBAAP,CAA2B5D,OAA3B,EAA6C;AAC3C,QAAIqD,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACxB9E,MAAAA,kBAAkB,CAACoF,mBAAnB,CAAuC5D,OAAvC;AACD,KAFD,MAEO;AACL6D,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,kBAAP,GAA8C;AAC5C,QAAIV,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACxB,aAAO9E,kBAAkB,CAACuF,kBAAnB,EAAP;AACD,KAFD,MAEO;AACLF,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACA,aAAO,IAAInB,OAAJ,CAAYC,OAAO,IAAIA,OAAO,CAAC,KAAD,CAA9B,CAAP;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOoB,cAAP,CAAsBC,WAAtB,EAA2C;AACzC,QAAIZ,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACxB9E,MAAAA,kBAAkB,CAACwF,cAAnB,CAAkCC,WAAlC;AACD,KAFD,MAEO;AACLJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOI,cAAP,GAAyC;AACvC,QAAIb,sBAASC,EAAT,IAAe,KAAnB,EAA0B;AACxBO,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACD;;AACD,WAAOtF,kBAAkB,CAAC0F,cAAnB,EAAP;AACD;AAED;AACF;AACA;;;AACE,SAAOC,oBAAP,GAA8B;AAC5B3F,IAAAA,kBAAkB,CAAC2F,oBAAnB;AACD;AAED;AACF;AACA;;;AACE,SAAOC,oBAAP,GAA8B;AAC5B5F,IAAAA,kBAAkB,CAAC4F,oBAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,cAAP,CAAsBC,SAAtB,EAA2D;AACzD,WAAO9F,kBAAkB,CAAC6F,cAAnB,CAAkCC,SAAlC,CAAP;AACD;AAED;AACF;AACA;;;AACE,SAAOC,cAAP,GAAwB;AACtB/F,IAAAA,kBAAkB,CAAC+F,cAAnB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,gBAAP,GAAmD;AACjD,WAAOhG,kBAAkB,CAACgG,gBAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,kBAAP,CAA0BH,SAA1B,EAA+D;AAC7D,WAAO9F,kBAAkB,CAACiG,kBAAnB,CAAsCH,SAAtC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOI,oBAAP,CAA4BJ,SAA5B,EAAiE;AAC/D,WAAO9F,kBAAkB,CAACkG,oBAAnB,CAAwCJ,SAAxC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOK,YAAP,GAAwC;AACtC,WAAOnG,kBAAkB,CAACmG,YAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,iCAAP,CAAyC5E,OAAzC,EAA2D;AACzDxB,IAAAA,kBAAkB,CAACoG,iCAAnB,CAAqD5E,OAArD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAO6E,sBAAP,GAA8D;AAC5D,WAAOrG,kBAAkB,CAACqG,sBAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,SAAOC,kBAAP,GAA4B;AAC1BtG,IAAAA,kBAAkB,CAACsG,kBAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,SAAOC,iBAAP,CAAyBC,UAAzB,EAA6C;AAC3CxG,IAAAA,kBAAkB,CAACuG,iBAAnB,CAAqCC,UAArC;AACD;;AApfuB","sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport { NativeModules, Platform, EmitterSubscription } from \"react-native\";\n\nimport { CustomEvent } from \"./CustomEvent\";\nimport { TagGroupEditor, TagGroupOperation } from \"./TagGroupEditor\";\nimport { AttributeEditor, AttributeOperation } from \"./AttributeEditor\";\nimport { UAEventEmitter } from \"./UAEventEmitter\";\nimport { JsonObject, JsonValue } from \"./Json\";\n\n/**\n * @hidden\n */\nconst UrbanAirshipModule = NativeModules.UrbanAirshipReactModule;\n\n/**\n * @hidden\n */\nconst EventEmitter = new UAEventEmitter();\n\n/**\n * Enum of internal event type names used by UAEventEmitter\n * @hidden\n */\nenum InternalEventType {\n  Registration = \"com.urbanairship.registration\",\n  NotificationResponse = \"com.urbanairship.notification_response\",\n  PushReceived = \"com.urbanairship.push_received\",\n  DeepLink = \"com.urbanairship.deep_link\",\n  InboxUpdated = \"com.urbanairship.inbox_updated\",\n  NotificationOptInStatus = \"com.urbanairship.notification_opt_in_status\",\n  ShowInbox = \"com.urbanairship.show_inbox\",\n}\n\n/**\n * Enum of event type names.\n */\nexport enum EventType {\n  /**\n   * Notification response event.\n   */\n  NotificationResponse = \"notificationResponse\",\n  /**\n   * Push received event.\n   */\n  PushReceived = \"pushReceived\",\n  /**\n   * Register event.\n   */\n  Register = \"register\",\n  /**\n   * Registration event.\n   */\n  Registration = \"registration\",\n  /**\n   * Deep link event.\n   */\n  DeepLink = \"deepLink\",\n  /**\n   * Notification opt-in status event.\n   */\n  NotificationOptInStatus = \"notificationOptInStatus\",\n  /**\n   * Inbox updated event.\n   */\n  InboxUpdated = \"inboxUpdated\",\n  /**\n   * Show inbox event.\n   */\n  ShowInbox = \"showInbox\"\n}\n\n/**\n * Inbox message object.\n */\nexport interface InboxMessage {\n  /**\n   * The message ID. Needed to display, mark as read, or delete the message.\n   */\n  id: string;\n  /**\n   * The message title.\n   */\n  title: string;\n  /**\n   * The message sent date in milliseconds.\n   */\n  sentDate: number;\n  /**\n   * Optional - The icon url for the message.\n   */\n  listIconUrl: string;\n  /**\n   * The unread / read status of the message.\n   */\n  isRead: boolean;\n  /**\n   * The deleted status of the message.\n   */\n  isDeleted: boolean;\n  /**\n   * String to String map of any message extras.\n   */\n  extras: Record<string, string>;\n}\n\n/**\n * Event fired when a push is received.\n */\nexport interface PushReceivedEvent {\n  /**\n   * The alert.\n   */\n  alert?: string;\n  /**\n   * The title.\n   */\n  title?: string;\n  /**\n   * The notification ID.\n   */\n  notificationId: string;\n  /**\n   * The notification extras.\n   */\n  extras: JsonObject;\n}\n\n/**\n * Event fired when the user initiates a notification response.\n */\nexport interface NotificationResponseEvent {\n  /**\n   * The push notification.\n   */\n  notification: PushReceivedEvent;\n  /**\n   * The action button ID, if avilable.\n   */\n  actionId?: string;\n  /**\n   * Indicates whether the response was a foreground action.\n   * This value is always if the user taps the main notification,\n   * otherwise it is defined by the notification action button.\n   */\n  isForeground: boolean\n}\n\n/**\n * Enum of notification options. iOS only.\n */\nexport enum NotificationOptionsIOS {\n  /**\n   * Alerts.\n   */\n  Alert = \"alert\",\n  /**\n   * Sounds.\n   */\n  Sound = \"sound\",\n  /**\n   * Badges.\n   */\n  Badge = \"badge\"\n}\n\n/**\n * A map of notification options. iOS only.\n */\nexport type NotificationOptionsMapIOS = { [option in NotificationOptionsIOS]: boolean }\n\n/**\n * A map of foreground notification options. iOS only.\n */\nexport type ForegroundNotificationOptionsIOS = { [option in NotificationOptionsIOS]: boolean | null | undefined }\n\n/**\n * Enum of authorized notification settings. iOS only.\n */\nexport enum AuthorizedNotificationSettingsIOS {\n  /**\n   * Alerts.\n   */\n  Alert = \"alert\",\n  /**\n   * Sounds.\n   */\n  Sound = \"sound\",\n  /**\n   * Badges.\n   */\n  Badge = \"badge\",\n  /**\n   * CarPlay.\n   */\n  CarPlay = \"carPlay\",\n  /**\n   * Lock screen.\n   */\n  LockScreen = \"lockScreen\",\n  /**\n   * Notification center.\n   */\n  NotificationCenter = \"notificationCenter\"\n}\n\n/**\n * A map of authorized notification settings.\n */\nexport type iOSAuthorizedNotificationSettingsMap = { [setting in AuthorizedNotificationSettingsIOS]: boolean }\n\n/**\n * Event fired when the notification opt-in status changes.\n */\nexport interface NotificationOptInStatusEvent {\n  /**\n   * Whether the user is opted in to notifications.\n   */\n  optIn: boolean;\n\n  /**\n   * The authorized notification settings. iOS only.\n   */\n  authorizedNotificationSettings?: AuthorizedNotificationSettingsIOS;\n}\n\n/**\n * Event fired when the inbox is updated.\n */\nexport interface InboxUpdatedEvent {\n  /**\n   * The unread message count.\n   */\n  messageUnreadCount: number;\n  /**\n   * The total message count.\n   */\n  messageCount: number\n}\n\n/**\n * Event fired when the message center requests the inbox to be displayed.\n */\nexport interface ShowInboxEvent {\n  /**\n   * The message ID, if available.\n   */\n  messageId?: string;\n}\n\n/**\n * Event fired when a deep link is opened.\n */\nexport interface DeepLinkEvent {\n  /**\n   * The deep link string.\n   */\n  deepLink: string;\n}\n\n/**\n * Event fired when a channel registration occurs.\n */\nexport interface RegistrationEvent {\n  /**\n   * The channel ID.\n   */\n  channelId: string;\n  /**\n   * The registration token. The registration token might be undefined\n   * if registration is currently in progress, if the app is not setup properly\n   * for remote notifications, if running on an iOS simulator, or if running on\n   * an Android device that has an outdated or missing version of Google Play Services.\n   */\n  registrationToken?: string\n}\n\n/**\n * Converts between public and internal event types.\n * @hidden\n */\nfunction convertEventEnum(type: EventType): string {\n  if (type === EventType.NotificationResponse) {\n    return InternalEventType.NotificationResponse;\n  } else if (type === EventType.PushReceived) {\n    return InternalEventType.PushReceived;\n  } else if (type === EventType.Register || type === EventType.Registration) {\n    return InternalEventType.Registration;\n  } else if (type == EventType.DeepLink) {\n    return InternalEventType.DeepLink;\n  } else if (type == EventType.NotificationOptInStatus) {\n    return InternalEventType.NotificationOptInStatus;\n  } else if (type == EventType.InboxUpdated) {\n    return InternalEventType.InboxUpdated;\n  } else if (type == EventType.ShowInbox) {\n    return InternalEventType.ShowInbox;\n  }\n\n  throw new Error(\"Invalid event name: \" + type);\n}\n\n/**\n * Android notification config.\n */\nexport interface NotificationConfigAndroid {\n  /**\n   * The icon resource na,e.\n   */\n  icon?: string;\n  /**\n   * The large icon resource name.\n   */\n  largeIcon?: string;\n  /**\n   * The default android notification channel ID.\n   */\n  defaultChannelId?: string;\n}\n\n/**\n* The main Airship API.\n*/\nexport class UrbanAirship {\n  /**\n   * Sets the Android notification config. Values not set will fallback to any values set in the airship config options.\n   *\n   * @param config The notification config object.\n   */\n  static setAndroidNotificationConfig(config: NotificationConfigAndroid) {\n    UrbanAirshipModule.setAndroidNotificationConfig(config);\n  }\n\n  /**\n   * Sets user notifications enabled. The first time user notifications are enabled\n   * on iOS, it will prompt the user for notification permissions.\n   *\n   * @param enabled true to enable notifications, false to disable.\n   */\n  static setUserNotificationsEnabled(enabled: boolean) {\n    UrbanAirshipModule.setUserNotificationsEnabled(enabled);\n  }\n\n  /**\n   * Checks if user notifications are enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isUserNotificationsEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isUserNotificationsEnabled();\n  }\n\n  /**\n   * Global data collection flag. Enabled by default, unless `dataCollectionOptInEnabled`\n   * is set to `YES` in AirshipConfig.plist on iOS, and `true` in airshipconfig.properties on Android.\n   * When disabled, the device will stop collecting and sending data for named user, events,\n   * tags, attributes, associated identifiers, and location from the device.\n   *\n   * Push notifications will continue to work only if `UrbanAirship.setPushTokenRegistrationEnabled`\n   * has been explicitly set to `true`, otherwise it will default to the current state of `isDataCollectionEnabled`.\n   *\n   * @note To disable by default, set the `dataCollectionOptInEnabled` flag to `YES` in AirshipConfig.plist on iOS, and `true` in airshipconfig.properties on Android.\n   * @param enabled true to enable data collection, false to disable.\n   */\n  static setDataCollectionEnabled(enabled: boolean) {\n    UrbanAirshipModule.setDataCollectionEnabled(enabled);\n  }\n\n  /**\n   * Checks if data collection is enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isDataCollectionEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isDataCollectionEnabled();\n  }\n\n  /**\n   * Enables/disables sending the device token during channel registration.\n   * Defaults to `UrbanAirship.isDataCollectionEnabled`. If set to `false`, the app will not be able to receive push\n   * notifications.\n   * @param enabled true to enable push token registration, false to disable.\n   */\n  static setPushTokenRegistrationEnabled(enabled: boolean) {\n    UrbanAirshipModule.setPushTokenRegistrationEnabled(enabled);\n  }\n\n  /**\n   * Checks if push token registration is enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isPushTokenRegistrationEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isPushTokenRegistrationEnabled();\n  }\n\n  /**\n   * Enables user notifications.\n   *\n   * @return A promise that returns true if enablement was authorized\n   * or false if enablement was rejected\n   */\n  static enableUserPushNotifications(): Promise<boolean> {\n    return UrbanAirshipModule.enableUserPushNotifications();\n  }\n\n  /**\n   * Enables channel creation if `channelCreationDelayEnabled` was\n   * enabled in the config.\n   */\n  static enableChannelCreation() {\n    UrbanAirshipModule.enableChannelCreation();\n  }\n\n  /**\n   * Checks if app notifications are enabled or not. Its possible to have `userNotificationsEnabled`\n   * but app notifications being disabled if the user opted out of notifications.\n   *\n   * @return A promise with the result.\n   */\n  static isUserNotificationsOptedIn(): Promise<boolean> {\n    return UrbanAirshipModule.isUserNotificationsOptedIn();\n  }\n\n  /**\n   * Sets the named user.\n   *\n   * @param namedUser The named user string, or null/undefined to clear the named user.\n   */\n  static setNamedUser(namedUser: string | null | undefined) {\n    UrbanAirshipModule.setNamedUser(namedUser);\n  }\n\n  /**\n   * Gets the named user.\n   *\n   * @return A promise with the result.\n   */\n  static getNamedUser(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getNamedUser();\n  }\n\n  /**\n   * Adds a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static addTag(tag: string) {\n    UrbanAirshipModule.addTag(tag);\n  }\n\n  /**\n   * Removes a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static removeTag(tag: string) {\n    UrbanAirshipModule.removeTag(tag);\n  }\n\n  /**\n   * Gets the channel tags.\n   *\n   * @return A promise with the result.\n   */\n  static getTags(): Promise<string[]> {\n    return UrbanAirshipModule.getTags();\n  }\n\n  /**\n   * Creates an editor to modify the named user tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n  static editNamedUserTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editNamedUserTagGroups(operations);\n    });\n  }\n\n  /**\n   * Creates an editor to modify the channel tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n  static editChannelTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editChannelTagGroups(operations);\n    });\n  }\n\n  /**\n   * Creates an editor to modify the channel attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editChannelAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editChannelAttributes(operations);\n    });\n  }\n\n  /**\n   * Creates an editor to modify the named user attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editNamedUserAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editNamedUserAttributes(operations);\n    });\n  }\n\n  /**\n   * Enables or disables analytics.\n   *\n   * Disabling analytics will delete any locally stored events\n   * and prevent any events from uploading. Features that depend on analytics being\n   * enabled may not work properly if it's disabled (reports, region triggers,\n   * location segmentation, push to local time).\n   *\n   * @param enabled true to enable notifications, false to disable.\n   */\n  static setAnalyticsEnabled(enabled: boolean) {\n    UrbanAirshipModule.setAnalyticsEnabled(enabled);\n  }\n\n  /**\n   * Checks if analytics is enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isAnalyticsEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isAnalyticsEnabled();\n  }\n\n  /**\n   * Initiates screen tracking for a specific app screen, must be called once per tracked screen.\n   *\n   * @param screen The screen's string identifier\n   */\n  static trackScreen(screen: string) {\n    UrbanAirshipModule.trackScreen(screen);\n  }\n\n  /**\n   * Gets the channel ID.\n   *\n   * @return A promise with the result.\n   */\n  static getChannelId(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getChannelId();\n  }\n\n  /**\n   * Gets the registration token.\n   *\n   * @return A promise with the result. The registration token might be undefined\n   * if registration is currently in progress, if the app is not setup properly\n   * for remote notifications, if running on an iOS simulator, or if running on\n   * an Android device that has an outdated or missing version of Google Play Services.\n   */\n  static getRegistrationToken(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getRegistrationToken();\n  }\n\n  /**\n   * Associates an identifier for the Connect data stream.\n   *\n   * @param key The identifier's key.\n   * @param id The identifier's id, or null/unefined to clear.\n   */\n  static associateIdentifier(key: string, id?: string) {\n    UrbanAirshipModule.associateIdentifier(key, id);\n  }\n\n  /**\n   * Adds a custom event.\n   *\n   * @param event The custom event.\n   * @return A promise that returns null if resolved, or an Error if the\n   * custom event is rejected.\n   */\n  static addCustomEvent(event: CustomEvent): Promise<null | Error> {\n    const actionArg = {\n      event_name: event._name,\n      event_value: event._value,\n      transaction_id: event._transactionId,\n      properties: event._properties\n    };\n\n    return new Promise((resolve, reject) => {\n      UrbanAirshipModule.runAction(\"add_custom_event_action\", actionArg).then(() => {\n        resolve();\n      }, (error: Error) => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Runs an Urban Airship action.\n   *\n   * @param name The name of the action.\n   * @param value The action's value.\n   * @return A promise that returns the action result if the action\n   * successfully runs, or the Error if the action was unable to be run.\n   */\n  static runAction(name: string, value?: JsonValue): Promise<JsonValue | Error> {\n    return UrbanAirshipModule.runAction(name, value);\n  }\n\n  /**\n   * Sets the foregorund presentation options for iOS.\n   * This method is only supported on iOS. Android will no-op.\n   *\n   * @param options The map of options.\n   */\n  static setForegroundPresentationOptions(options: ForegroundNotificationOptionsIOS) {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.setForegroundPresentationOptions(options);\n    }\n  }\n\n  /**\n   * Adds a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Reistration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener.\n   * @return An emitter subscription.\n   */\n  static addListener(eventType: EventType, listener: (...args: any[]) => any): EmitterSubscription {\n    return EventEmitter.addListener(convertEventEnum(eventType), listener);\n  }\n\n  /**\n   * Removes a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Reistration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener. Should be a reference to the function passed into addListener.\n   */\n  static removeListener(eventType: EventType, listener: (...args: any[]) => any) {\n    EventEmitter.removeListener(convertEventEnum(eventType), listener);\n  }\n\n  /**\n   * Removes all listeners for Urban Airship events.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Reistration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   */\n  static removeAllListeners(eventType: EventType) {\n    EventEmitter.removeAllListeners(convertEventEnum(eventType));\n  }\n\n  /**\n   * Enables or disables autobadging on iOS. Badging is not supported for Android.\n   *\n   * @param enabled Whether or not to enable autobadging.\n   */\n  static setAutobadgeEnabled(enabled: boolean) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setAutobadgeEnabled(enabled);\n    } else {\n      console.log(\"This feature is not supported on this platform.\");\n    }\n  }\n\n  /**\n   * Checks to see if autobadging on iOS is enabled. Badging is not supported for Android.\n   *\n   * @return A promise with the result, either true or false.\n   */\n  static isAutobadgeEnabled(): Promise<boolean> {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.isAutobadgeEnabled();\n    } else {\n      console.log(\"This feature is not supported on this platform.\");\n      return new Promise(resolve => resolve(false));\n    }\n  }\n\n  /**\n   * Sets the badge number for iOS. Badging is not supported for Android.\n   *\n   * @param badgeNumber The badge number.\n   */\n  static setBadgeNumber(badgeNumber: number) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setBadgeNumber(badgeNumber);\n    } else {\n      console.log(\"This feature is not supported on this platform.\");\n    }\n  }\n\n  /**\n   * Gets the current badge number for iOS. Badging is not supported for Android\n   * and this method will always return 0.\n   *\n   * @return A promise with the result.\n   */\n  static getBadgeNumber(): Promise<number> {\n    if (Platform.OS != 'ios') {\n      console.log(\"This feature is not supported on this platform.\");\n    }\n    return UrbanAirshipModule.getBadgeNumber();\n  }\n\n  /**\n   * Displays the default message center.\n   */\n  static displayMessageCenter() {\n    UrbanAirshipModule.displayMessageCenter();\n  }\n\n  /**\n   * Dismisses the default message center.\n   */\n  static dismissMessageCenter() {\n    UrbanAirshipModule.dismissMessageCenter();\n  }\n\n  /**\n   * Displays an inbox message.\n   *\n   * @param messageId The id of the message to be displayed.\n   * @return A promise with the result.\n   */\n  static displayMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.displayMessage(messageId);\n  }\n\n  /**\n   * Dismisses the currently displayed inbox message.\n   */\n  static dismissMessage() {\n    UrbanAirshipModule.dismissMessage();\n  }\n\n  /**\n   * Retrieves the current inbox messages.\n   *\n   * @return A promise with the result.\n   */\n  static getInboxMessages(): Promise<InboxMessage[]> {\n    return UrbanAirshipModule.getInboxMessages();\n  }\n\n  /**\n   * Deletes an inbox message.\n   *\n   * @param messageId The id of the message to be deleted.\n   * @return A promise with the result.\n   */\n  static deleteInboxMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.deleteInboxMessage(messageId);\n  }\n\n  /**\n   * Marks an inbox message as read.\n   *\n   * @param messageId The id of the message to be marked as read.\n   * @return A promise with the result.\n   */\n  static markInboxMessageRead(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.markInboxMessageRead(messageId);\n  }\n\n  /**\n   * Forces the inbox to refresh. This is normally not needed as the inbox will\n   * automatically refresh on foreground or when a push arrives that's associated\n   * with a message.\n   *\n   * @return{Promise.<boolean>} A promise with the result.\n   */\n  static refreshInbox(): Promise<boolean> {\n    return UrbanAirshipModule.refreshInbox();\n  }\n\n  /**\n   * Sets the default behavior when the message center is launched from a push\n   * notification. If set to false the message center must be manually launched.\n   *\n   * @param enabled true to automatically launch the default message center, false to disable.\n   */\n  static setAutoLaunchDefaultMessageCenter(enabled: boolean) {\n    UrbanAirshipModule.setAutoLaunchDefaultMessageCenter(enabled);\n  }\n\n  /**\n   * Gets all the active notifications for the application.\n   * Supported on Android Marshmallow (23)+ and iOS 10+.\n   *\n   * @return A promise with the result.\n   */\n  static getActiveNotifications(): Promise<PushReceivedEvent[]> {\n    return UrbanAirshipModule.getActiveNotifications();\n  }\n\n  /**\n   * Clears all notifications for the application.\n   * Supported on Android and iOS 10+. For older iOS devices, you can set\n   * the badge number to 0 to clear notifications.\n   */\n  static clearNotifications() {\n    UrbanAirshipModule.clearNotifications();\n  }\n\n  /**\n   * Clears a specific notification.\n   * Supported on Android and iOS 10+.\n   *\n   * @param identifier The notification identifier. The identifier will be\n   * available in the PushReceived event and in the active notification response\n   * under the \"notificationId\" field.\n   */\n  static clearNotification(identifier: string) {\n    UrbanAirshipModule.clearNotification(identifier);\n  }\n}\n"]}