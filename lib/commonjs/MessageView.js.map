{"version":3,"sources":["MessageView.tsx"],"names":["UARCTMessageView","MessageLoadError","MessageView","React","Component","event","props","onLoadStarted","nativeEvent","onLoadFinished","onLoadError","onClose","render","_onLoadError","_onLoadStarted","_onLoadFinished","_onClose"],"mappings":"AAAA;AAEA;;;;;;;AAEA;;AACA;;;;;;;;AAGA,MAAMA,gBAAgB,GAAG,yCAA8C,kBAA9C,CAAzB;;AASA;AACA;AACA;IACYC,gB;AAeZ;AACA;AACA;;;;WAjBYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,gCAAAA,gB;;AA6FZ;AACA;AACA;AACO,MAAMC,WAAN,SAA0BC,eAAMC,SAAhC,CAA4D;AAAA;AAAA;;AAAA,4CAE/CC,KAAD,IAA0D;AACzE,UAAI,CAAC,KAAKC,KAAL,CAAWC,aAAhB,EAA+B;AAC7B;AACD;;AACD,WAAKD,KAAL,CAAWC,aAAX,CAAyBF,KAAK,CAACG,WAA/B;AACD,KAPgE;;AAAA,6CAS9CH,KAAD,IAA2D;AAC3E,UAAI,CAAC,KAAKC,KAAL,CAAWG,cAAhB,EAAgC;AAC9B;AACD;;AACD,WAAKH,KAAL,CAAWG,cAAX,CAA0BJ,KAAK,CAACG,WAAhC;AACD,KAdgE;;AAAA,0CAgBjDH,KAAD,IAAwD;AACrE,UAAI,CAAC,KAAKC,KAAL,CAAWI,WAAhB,EAA6B;AAC3B;AACD;;AACD,WAAKJ,KAAL,CAAWI,WAAX,CAAuBL,KAAK,CAACG,WAA7B;AACD,KArBgE;;AAAA,sCAuBrDH,KAAD,IAAqD;AAC9D,UAAI,CAAC,KAAKC,KAAL,CAAWK,OAAhB,EAAyB;AACvB;AACD;;AACD,WAAKL,KAAL,CAAWK,OAAX,CAAmBN,KAAK,CAACG,WAAzB;AACD,KA5BgE;AAAA;;AA8BjEI,EAAAA,MAAM,GAAG;AACP,wBAAO,6BAAC,gBAAD,eAAsB,KAAKN,KAA3B;AAAkC,MAAA,WAAW,EAAE,KAAKO,YAApD;AAAkE,MAAA,aAAa,EAAE,KAAKC,cAAtF;AAAsG,MAAA,cAAc,EAAE,KAAKC,eAA3H;AAA4I,MAAA,OAAO,EAAE,KAAKC;AAA1J,OAAP;AACD;;AAhCgE","sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport React from \"react\";\nimport { requireNativeComponent, NativeSyntheticEvent } from \"react-native\";\n\n\nconst UARCTMessageView = requireNativeComponent<UARCTMessageViewProps>('UARCTMessageView');\n\ninterface UARCTMessageViewProps {\n  onLoadStarted: (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => void;\n  onLoadFinished: (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => void;\n  onLoadError: (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => void;\n  onClose: (event: NativeSyntheticEvent<MessageClosedEvent>) => void;\n}\n\n/**\n * Enum of possible message load errors\n */\nexport enum MessageLoadError {\n  /**\n   * The message is not available.\n   */\n  NotAvailable = \"MESSAGE_NOT_AVAILABLE\",\n  /**\n   * Failed to fetch the message.\n   */\n  FetchFailed = \"FAILED_TO_FETCH_MESSAGE\",\n  /**\n   * Failed to load the message.\n   */\n  LoadFailed = \"MESSAGE_LOAD_FAILED\"\n}\n\n/**\n * Message load started event.\n */\nexport interface MessageLoadStartedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load finished event.\n */\nexport interface MessageLoadFinishedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load error event.\n */\nexport interface MessageLoadErrorEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n  /**\n   * Whether the failure is retryable.\n   */\n  retryable: boolean\n  /**\n   * The error\n   */\n  error: MessageLoadError\n}\n\n/**\n * Message closed event\n */\nexport interface MessageClosedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * MessageView props\n */\nexport interface MessageViewProps  {\n  /**\n   * A callback when the view starts loading a message.\n   *\n   * @param event: The message load started event.\n   */\n  onLoadStarted: (event: MessageLoadStartedEvent) => void;\n  /**\n   * A callback when the view finishes loading a message.\n   *\n   * @param event: The message load finished event.\n   */\n  onLoadFinished: (event: MessageLoadFinishedEvent) => void;\n  /**\n   * A callback when the view fails to load a message with an error.\n   *\n   * @param event: The message load error event.\n   */\n  onLoadError: (event: MessageLoadErrorEvent) => void;\n  /**\n   * A callback when the message is closed.\n   *\n   * @param event: The message closed event.\n   */\n  onClose: (event: MessageClosedEvent) => void;\n}\n\n/**\n * Inbox message view component.\n */\nexport class MessageView extends React.Component<MessageViewProps> {\n\n  _onLoadStarted = (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => {\n    if (!this.props.onLoadStarted) {\n      return;\n    }\n    this.props.onLoadStarted(event.nativeEvent);\n  };\n\n  _onLoadFinished = (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => {\n    if (!this.props.onLoadFinished) {\n      return;\n    }\n    this.props.onLoadFinished(event.nativeEvent);\n  };\n\n  _onLoadError = (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => {\n    if (!this.props.onLoadError) {\n      return;\n    }\n    this.props.onLoadError(event.nativeEvent);\n  };\n\n  _onClose = (event: NativeSyntheticEvent<MessageClosedEvent>) => {\n    if (!this.props.onClose) {\n      return;\n    }\n    this.props.onClose(event.nativeEvent);\n  };\n\n  render() {\n    return <UARCTMessageView {...this.props} onLoadError={this._onLoadError} onLoadStarted={this._onLoadStarted} onLoadFinished={this._onLoadFinished} onClose={this._onClose} />;\n  }\n}\n\n"]}