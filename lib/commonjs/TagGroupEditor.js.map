{"version":3,"sources":["TagGroupEditor.ts"],"names":["TagGroupEditor","constructor","onApply","operations","addTags","group","tags","operation","push","removeTags","setTags","apply"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;AAgBA;AACA;AACA;AACO,MAAMA,cAAN,CAAqB;AAI1B;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAqD;AAAA;;AAAA;;AAC9D,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,KAAD,EAAgBC,IAAhB,EAAgD;AACrD,UAAMC,SAAS,GAAG;AAAE,uBAAiB,KAAnB;AAA0B,eAASF,KAAnC;AAA0C,cAAQC;AAAlD,KAAlB;AACA,SAAKH,UAAL,CAAgBK,IAAhB,CAAqBD,SAArB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,UAAU,CAACJ,KAAD,EAAgBC,IAAhB,EAAgD;AACxD,UAAMC,SAAS,GAAG;AAAE,uBAAiB,QAAnB;AAA6B,eAASF,KAAtC;AAA6C,cAAQC;AAArD,KAAlB;AACA,SAAKH,UAAL,CAAgBK,IAAhB,CAAqBD,SAArB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,OAAO,CAACL,KAAD,EAAgBC,IAAhB,EAAqD;AAC1D,UAAMC,SAAS,GAAG;AAAE,uBAAiB,KAAnB;AAA0B,eAASF,KAAnC;AAA0C,cAAQC;AAAlD,KAAlB;AACA,SAAKH,UAAL,CAAgBK,IAAhB,CAAqBD,SAArB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,KAAK,GAAG;AACN,SAAKT,OAAL,CAAa,KAAKC,UAAlB;AACD;;AA3DyB","sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\n/**\n * Tag group operation.\n * @hidden\n */\nexport interface TagGroupOperation {\n  /**\n   * The operation name\n   */\n  operationType: string;\n  /**\n   * The tag group name\n   */\n  group: string;\n  /**\n   * An array of tags.\n   */\n  tags: string[];\n}\n\n/**\n * Editor for tag groups.\n */\nexport class TagGroupEditor {\n  onApply: (operations: TagGroupOperation[]) => void;\n  operations: TagGroupOperation[];\n\n  /**\n   * TagGroupEditor constructor\n   *\n   * @hidden\n   * @param onApply The apply function\n   */\n  constructor(onApply: (operations: TagGroupOperation[]) => void) {\n    this.onApply = onApply;\n    this.operations = [];\n  }\n\n  /**\n   * Adds tags to a tag group.\n   *\n   * @param tagGroup The tag group.\n   * @param tags Tags to add.\n   * @return The tag group editor instance.\n   */\n  addTags(group: string, tags: string[]): TagGroupEditor {\n    const operation = { \"operationType\": \"add\", \"group\": group, \"tags\": tags };\n    this.operations.push(operation);\n    return this;\n  }\n\n  /**\n   * Removes tags from the tag group.\n   *\n   * @param tagGroup The tag group.\n   * @param tags Tags to remove.\n   * @return The tag group editor instance.\n   */\n  removeTags(group: string, tags: string[]): TagGroupEditor {\n    const operation = { \"operationType\": \"remove\", \"group\": group, \"tags\": tags };\n    this.operations.push(operation);\n    return this;\n  }\n\n  /**\n   * Overwrite the current set of tags on the Tag Group.\n   *\n   * @param tagGroup The tag group.\n   * @param tags Tags to set.\n   * @return The tag group editor instance.\n   */\n  setTags(group: string, tags: Array<string>): TagGroupEditor {\n    const operation = { \"operationType\": \"set\", \"group\": group, \"tags\": tags };\n    this.operations.push(operation);\n    return this;\n  }\n\n  /**\n   * Applies the tag changes.\n   */\n  apply() {\n    this.onApply(this.operations);\n  }\n}\n"]}