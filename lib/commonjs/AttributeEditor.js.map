{"version":3,"sources":["AttributeEditor.ts"],"names":["AttributeEditor","constructor","onApply","operations","setAttribute","name","value","attributeValue","attributeType","toString","Date","getTime","operation","type","push","removeAttribute","apply"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;AAoBA;AACA;AACA;AACO,MAAMA,eAAN,CAAsB;AAI3B;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAsD;AAAA;;AAAA;;AAC/D,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,YAAY,CAACC,IAAD,EAAeC,KAAf,EAAyE;AACnF,QAAIC,cAAJ;AACA,QAAIC,aAAJ;;AAEA,QAAI,OAAOF,KAAP,IAAgB,SAApB,EAA+B;AAE7B;AACAC,MAAAA,cAAc,GAAGD,KAAK,CAACG,QAAN,EAAjB;AACAD,MAAAA,aAAa,GAAG,QAAhB;AAED,KAND,MAMO;AAELD,MAAAA,cAAc,GAAGD,KAAjB;;AACA,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BE,QAAAA,aAAa,GAAG,QAAhB;AACD,OAFD,MAEO,IAAI,OAAOD,cAAP,KAA0B,QAA9B,EAAwC;AAC7CC,QAAAA,aAAa,GAAG,QAAhB;AACD,OAFM,MAEA,IAAIF,KAAK,YAAYI,IAArB,EAA2B;AAChC;AACA;AACAF,QAAAA,aAAa,GAAG,MAAhB;AACAD,QAAAA,cAAc,GAAGD,KAAK,CAACK,OAAN,EAAjB;AACD,OALM,MAKA;AACL,cAAM,iCAAiC,OAAOJ,cAA9C;AACD;AACF;;AAED,UAAMK,SAAS,GAAG;AAAE,gBAAU,KAAZ;AAAmB,eAASL,cAA5B;AAA4C,aAAOF,IAAnD;AAAyDQ,MAAAA,IAAI,EAAEL;AAA/D,KAAlB;AACA,SAAKL,UAAL,CAAgBW,IAAhB,CAAqBF,SAArB;AAEA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEG,EAAAA,eAAe,CAACV,IAAD,EAAgC;AAC7C,UAAMO,SAAS,GAAG;AAAE,gBAAU,QAAZ;AAAsB,aAAOP;AAA7B,KAAlB;AACA,SAAKF,UAAL,CAAgBW,IAAhB,CAAqBF,SAArB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,KAAK,GAAG;AACN,SAAKd,OAAL,CAAa,KAAKC,UAAlB;AACD;;AAvE0B","sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\n/**\n * Attribute operation\n * @hidden\n */\nexport interface AttributeOperation {\n  /**\n   * The operation name.\n   */\n  action: string;\n  /**\n   * The attribute key.\n   */\n  key: string;\n  /**\n   * The attribute value, if avaialble.\n   */\n  value?: string | number | Date;\n  /**\n   * The attribute type, if available.\n   */\n  type?: \"string\" | \"number\" | \"date\";\n}\n\n/**\n * Editor for attributes.\n */\nexport class AttributeEditor {\n  onApply: (operations: AttributeOperation[]) => void;\n  operations: AttributeOperation[];\n\n  /**\n   * AttributeEditor constructor\n   *\n   * @hidden\n   * @param onApply The apply function\n   */\n  constructor(onApply: (operations: AttributeOperation[]) => void) {\n    this.onApply = onApply;\n    this.operations = [];\n  }\n\n  /**\n   * Adds an attribute.\n   *\n   * @param value The attribute value.\n   * @param name The attribute name.\n   * @return The attribute editor instance.\n   */\n  setAttribute(name: string, value: string | number | boolean | Date): AttributeEditor {\n    var attributeValue: string | number | Date;\n    var attributeType: \"string\" | \"number\" | \"date\";\n\n    if (typeof value == \"boolean\") {\n\n      // No boolean attribute type. Convert value to string.\n      attributeValue = value.toString();\n      attributeType = \"string\";\n\n    } else {\n\n      attributeValue = value;\n      if (typeof value === \"string\") {\n        attributeType = \"string\";\n      } else if (typeof attributeValue === \"number\") {\n        attributeType = \"number\";\n      } else if (value instanceof Date) {\n        // JavaScript's date type doesn't pass through the JS to native bridge.\n        // Dates are instead serialized as milliseconds since epoch.\n        attributeType = \"date\";\n        attributeValue = value.getTime();\n      } else {\n        throw \"Unsupported attribute type: \" + typeof attributeValue;\n      }\n    }\n\n    const operation = { \"action\": \"set\", \"value\": attributeValue, \"key\": name, type: attributeType};\n    this.operations.push(operation);\n\n    return this;\n  }\n\n  /**\n   * Removes an attribute.\n   * @param name The name of the attribute to remove.\n   * @return The attribute editor instance.\n   */\n  removeAttribute(name: string): AttributeEditor {\n    const operation = { \"action\": \"remove\", \"key\": name };\n    this.operations.push(operation);\n    return this;\n  }\n\n  /**\n   * Applies the attribute operations.\n   */\n  apply() {\n    this.onApply(this.operations);\n  }\n}\n"]}